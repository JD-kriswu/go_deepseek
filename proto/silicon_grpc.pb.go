// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/silicon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SiliconService_GetModelList_FullMethodName         = "/silicon.SiliconService/GetModelList"
	SiliconService_CreateChatCompletion_FullMethodName = "/silicon.SiliconService/CreateChatCompletion"
)

// SiliconServiceClient is the client API for SiliconService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Silicon服务
type SiliconServiceClient interface {
	// 获取模型列表
	GetModelList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetModelListResponse, error)
	// 创建聊天对话
	CreateChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error)
}

type siliconServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiliconServiceClient(cc grpc.ClientConnInterface) SiliconServiceClient {
	return &siliconServiceClient{cc}
}

func (c *siliconServiceClient) GetModelList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetModelListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelListResponse)
	err := c.cc.Invoke(ctx, SiliconService_GetModelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siliconServiceClient) CreateChatCompletion(ctx context.Context, in *ChatCompletionRequest, opts ...grpc.CallOption) (*ChatCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatCompletionResponse)
	err := c.cc.Invoke(ctx, SiliconService_CreateChatCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiliconServiceServer is the server API for SiliconService service.
// All implementations must embed UnimplementedSiliconServiceServer
// for forward compatibility.
//
// Silicon服务
type SiliconServiceServer interface {
	// 获取模型列表
	GetModelList(context.Context, *Empty) (*GetModelListResponse, error)
	// 创建聊天对话
	CreateChatCompletion(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error)
	mustEmbedUnimplementedSiliconServiceServer()
}

// UnimplementedSiliconServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSiliconServiceServer struct{}

func (UnimplementedSiliconServiceServer) GetModelList(context.Context, *Empty) (*GetModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelList not implemented")
}
func (UnimplementedSiliconServiceServer) CreateChatCompletion(context.Context, *ChatCompletionRequest) (*ChatCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatCompletion not implemented")
}
func (UnimplementedSiliconServiceServer) mustEmbedUnimplementedSiliconServiceServer() {}
func (UnimplementedSiliconServiceServer) testEmbeddedByValue()                        {}

// UnsafeSiliconServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiliconServiceServer will
// result in compilation errors.
type UnsafeSiliconServiceServer interface {
	mustEmbedUnimplementedSiliconServiceServer()
}

func RegisterSiliconServiceServer(s grpc.ServiceRegistrar, srv SiliconServiceServer) {
	// If the following call pancis, it indicates UnimplementedSiliconServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SiliconService_ServiceDesc, srv)
}

func _SiliconService_GetModelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiliconServiceServer).GetModelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiliconService_GetModelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiliconServiceServer).GetModelList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiliconService_CreateChatCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiliconServiceServer).CreateChatCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SiliconService_CreateChatCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiliconServiceServer).CreateChatCompletion(ctx, req.(*ChatCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiliconService_ServiceDesc is the grpc.ServiceDesc for SiliconService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiliconService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "silicon.SiliconService",
	HandlerType: (*SiliconServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModelList",
			Handler:    _SiliconService_GetModelList_Handler,
		},
		{
			MethodName: "CreateChatCompletion",
			Handler:    _SiliconService_CreateChatCompletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/silicon.proto",
}
